<app>
  <div class="container">
    <router>
      <my-header>
        <nav slot="menu-nav" class="desktop-nav">
          <ul>
            <li each={page in state.pages}>
              <a
                class={props.activePage === page ? 'active' : '' }
                href={page.path}>{page.label}</a>
            </li>
          </ul>
        </nav>
        <button slot="menu-button" class="menu-toggle" onclick={ openMenu }>
          <sl-icon name="list"></sl-icon>
        </button>
      </my-header>
      <sl-drawer placement="end" class="nav-drawer">
        <nav class="mobile-nav">
          <ul>
            <li each={page in state.pages}>
              <a
                class={props.activePage === page ? 'active' : '' }
                href={page.path}
                onclick={closeMenu}>{page.label}</a>
            </li>
          </ul>
        </nav>
        <social-links />
      </sl-drawer>

      <div if={state.showNotFound} class="row">
        <not-found />
      </div>
      <div if={!state.showNotFound} class="app">
        <route each={page in state.pages} path={page.path}>
          <main is={page.componentName} class="main-content" />
          <scroll-top />

          <my-footer />
        </route>
      </div>
    </router>
  </div>
  <script>
    import { Router, Route, route, toRegexp, match } from '@riotjs/route'
    import NotFound from '@/pages/not-found.riot'
    import pages from './pages'
    import Home from '@/pages/home.riot'
    import About from '@/pages/about.riot'
    import Experience from '@/pages/experience.riot'
    import Projects from '@/pages/projects.riot'
    import Output from '@/pages/output.riot'
    import Contact from '@/pages/contact.riot'

    export default {
      components : {
        Router,
        Route,
        NotFound,
        Home,
        About,
        Experience,
        Projects,
        Output,
        Contact,
      },
      state: {
        pages,
        showNotFound: false,
        activePage: null
      },
      onBeforeMount({ isServer }) {
        this.anyRouteStream = route('(.*)')
        this.anyRouteStream.on.value(this.onAnyRoute)
      },
      onAnyRoute(path) {
        const activePage = pages.find(p => match(path.pathname, toRegexp(p.path)))

        this.update({
          activePage,
          showNotFound: !activePage
        })
      },
      onBeforeUnmount() {
        this.anyRouteStream.end()
      },
      openMenu() {
        this.$('.nav-drawer').show();
      },
      closeMenu() {
        this.$('.nav-drawer').hide();
      }

    }
  </script>

  <style>
    .app {
      font-family: 'Inter', sans-serif;
      color: var(--text-color);
      line-height: 1.6;
    }

    .section-title::after {
      content: '';
      display: block;
      width: 50px;
      height: 3px;
      background-color: var(--accent-color);
      margin: 0.5rem auto;
    }

    .nav-drawer::part(body) {
      padding-top: 2rem;
      padding-left: 5rem;
    }

    .nav-drawer sl-icon {
      margin-right: 1rem;
      color: var(--primary-color);
    }

    .mobile-nav ul {
      list-style-type: none;
      padding: 0;
      margin: 0;
    }

    .mobile-nav ul li {
      margin-bottom: 2rem;
    }

    .mobile-nav ul li a {
      display: block;
      width: 100%;
      color: var(--text-color);
      text-decoration: underline;
      font-size: 1.5rem;
      font-weight: 500;
      transition: color 0.3s ease;
    }

    .mobile-nav ul li a:hover {
      color: var(--primary-color);
    }

    @media (max-width: 768px) {
      .section-title {
        font-size: 2rem;
        margin-bottom: 3rem;
      }

      .nav-drawer social-links {
        position: absolute;
        bottom: 2rem;
      }
    }
  </style>
</app>